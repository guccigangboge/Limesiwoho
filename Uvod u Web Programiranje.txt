#include<stdio.h>
#include<stdlib.h>

#define MAX_REDOVA 50
#define MAX_KOLONA 50

/*
5
Svaki element matrice koji predstavlja maksimum svoje vrste i minimum svoje
kolone naziva se sedlasta tačka. Pronaći sve sedlaste tačke u zadatoj matrici.
*/



	int matrica[][MAX_KOLONA], 
	int indeks_vrste, int br_kolona) {

	int indeks_maksimuma = 0;
	int maksimum = matrica[indeks_vrste][0];

	for (int j = 1; j < br_kolona; j++) {
		if (matrica[indeks_vrste][j] > maksimum) {
			maksimum = matrica[indeks_vrste][j];
			indeks_maksimuma = j;
		}
	}
	return indeks_maksimuma;
}

int indeksRedaMinimumaUKoloni(
	int matrica[][MAX_KOLONA], 
	int indeks_kolone, int br_redova) {

	int minimum = matrica[0][indeks_kolone];
	int indeks_minimuma = 0;

	for (int i = 1; i < br_redova; i++) {
		if (matrica[i][indeks_kolone] < minimum) {
			minimum = matrica[i][indeks_kolone];
			indeks_minimuma = i;
		}
	}
	return indeks_minimuma;
}

bool sedlastaTacka(int matrica[][MAX_KOLONA], int n, int m, int i, int j) {
	int indeks_maksimuma_vrste = indeksKoloneMaksimumaUVrsti(matrica, i, m);
	int indeks_minimuma_kolone = indeksRedaMinimumaUKoloni(matrica, j, n);

	return indeks_maksimuma_vrste == j && indeks_minimuma_kolone == i;
}

void ispisiSedlasteTacke(int matrica[][MAX_KOLONA], int n, int m) {
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (sedlastaTacka(matrica, n, m, i, j)) {
				printf("Na mestu (%d, %d) je sedlasta tacka %d\n", i, j, matrica[i][j]);
			}
		}
	}
}

int main() {
	int n = 4;
	int m = 3;
	int matrica[MAX_REDOVA][MAX_KOLONA];
	unosMatrice(matrica, n, m);
	ispisMatrice(matrica, n, m);
	ispisiSedlasteTacke(matrica, n, m);
	system("pause");
	return 0;
}
-----------------------------------------------------------------------------------------------------------------------
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <cstring>
#include <math.h>

#pragma warning(disable: 4996)

bool palindrom(char* str1) {
	int i = 0;
	int j = strlen(str1);
	for (i; i <= j; i++) {
		while (true) {
			if (isspace(str1[i])) i++;
			else if (isspace(str1[j])) j--;
			else break;
		}
		if (i <= j) {
			if (!(tolower(str1[i]) == tolower(str1[j]))) return false;
		}
		j--;
	}
	return true;
}

void unos_stringa(char* str) {
	int i = 0;
	while (true) {
		scanf_s("%c", &str[i]);
		if (str[i] == '\n') break;
		i++;
	}
	str[i + 1] = '\0';
}

int main() {
	int br;
	char* niz[100];
	char izlaz1[100];
	char izlaz2[100];
	printf("Unesite broj stringova koji zelite da unesete: \n");
	scanf_s("%d", &br);
	for (int i = 0; i < br; i++) {
		printf("Unesite %d. string \n", i+1);
		unos_stringa(niz[i]);
	}
	for (int i = 0; i < br; i++) {
		if (palindrom(niz[i])) {
			strcat(izlaz1, niz[i]);
		}
	}
	int j = 0;
	for (int i = 0; i < strlen(izlaz1); i++) {
		if (izlaz1[i] == izlaz1[i + 1]) continue;
		izlaz2[j++] = izlaz1[i];
	}
	system("pause");
}
-------------------------------------------------------------------------------------------------------------------------
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <cstring>

#pragma warning(disable:4996)

int brSlova(char *string) {
	int br = 0;
	while (*string != '\0') {
		string++;
	}

	return br;
}

int brPojavljivanjeSlova(char *string, char x) {
	int br = 0;
	if (isupper(x)) x = tolower(x);
	while (*string != '\0') {
		if (isalpha(*string)) {
			if (tolower(*string) == x)
			br++;
		}
		string++;
	}

	return br;
}

void swap(char *str1, char *str2) {
	char temp[150];
	strcpy(temp, str1);
	strcpy(str1, str2);
	strcpy(str2, temp);
}

int main() {
	char x;
	printf("Unesi x: ");
	scanf_s("%c", &x, 1);

	FILE* ulaz = fopen("ulaz.txt", "r");
	if (ulaz == NULL) { printf("Nije nadjen file"); return 0; }

	char rec[150];
	char stringovi[50][150];

	int brStr = 0;

	while (!feof(ulaz)) {
		fscanf(ulaz, "%s", rec);
		strcpy(stringovi[brStr], rec);
		brStr++;
	}

	for (int i = 0; i < brStr; i++) {
		for (int j = i + 1; j < brStr; j++) {
			int brP1 = brPojavljivanjeSlova(stringovi[i], x);
			int brP2 = brPojavljivanjeSlova(stringovi[j], x);
			if (brP1 < brP2)
				swap(stringovi[i], stringovi[j]);
			if (brP1 == brP2) {
				if (brSlova(stringovi[i]) < brSlova(stringovi[j]))
					swap(stringovi[i], stringovi[j]);
			}
		}
	}

	FILE* izlaz = fopen("izlaz.txt", "w");

	fprintf(izlaz, "x = %c\n", x);
	for (int i = 0; i < brStr; i++) {
		fprintf(izlaz, "%s\n", stringovi[i]);
	}

	fcloseall();
	system("pause");
	return 0;
}
--------------------------------------------------------------------------------------------------------------
#include <stdio.h>
#include <stdlib.h>

struct Datum {
    int d;
    int m;
    int g;
} Datum;

void Prethodni(struct Datum* d) {
    int dan = d->d;
    int mesec = d->m;
    int godina = d->g;

    if (dan == 1 && mesec == 1) {
        dan = 31;
        mesec = 12;
        godina--;
    }
    
    else if (dan == 1) {
        if (mesec == 3) {
            if ((godina % 4 == 0 && godina % 100 != 0) || (godina % 400 == 0))
                dan = 29;
            else
                dan = 28;
        }
        else if (mesec == 2 || mesec == 4 || mesec == 6 || mesec == 9 || mesec == 11)
            dan = 31;
        else
            dan = 30;
        mesec--;
    }

    else
        dan--;

    d->d = dan;
    d->m = mesec;
    d->g = godina;
}

int main() {
    struct Datum datum;

    printf("Unesite datum u formatu d.m.g.: ");
    scanf_s("%d.%d.%d", &datum.d, &datum.m, &datum.g);

    printf("\nUlaz: %d.%d.%d.\t", datum.d, datum.m, datum.g);
    Prethodni(&datum);
    printf("\tIzlaz: %d.%d.%d.\n", datum.d, datum.m, datum.g);

    return 0;
}
--------------------------------------------------------------------
#include <stdio.h>
#include <limits.h>

#define MAX_VELICINA 50

bool validnoPolje(int i, int j, int n, int m) {
    return (i >= 0 && i < n) && (j >= 0 && j < m);
}

int leviS(int mat[][MAX_VELICINA], int i, int j, int n, int m) {
    return validnoPolje(i, j - 1, n, m) ? mat[i][j - 1] : INT_MIN;
}

int desniS(int mat[][MAX_VELICINA], int i, int j, int n, int m) {
    return validnoPolje(i, j + 1, n, m) ? mat[i][j + 1] : INT_MIN;
}

int gornjiS(int mat[][MAX_VELICINA], int i, int j, int n, int m) {
    return validnoPolje(i - 1, j, n, m) ? mat[i - 1][j] : INT_MIN;
}

int donjiS(int mat[][MAX_VELICINA], int i, int j, int n, int m) {
    return validnoPolje(i + 1, j, n, m) ? mat[i + 1][j] : INT_MIN;
}

int najvisiS(int mat[][MAX_VELICINA], int i, int j, int n, int m) {
    int max = leviS(mat, i, j, n, m);
    int sused = desniS(mat, i, j, n, m);
    max = max > sused ? max : sused;
    sused = gornjiS(mat, i, j, n, m);
    max = max > sused ? max : sused;
    sused = donjiS(mat, i, j, n, m);
    max = max > sused ? max : sused;

    return max;
}

int ako_je_dno_vraca_visinu(int mat[][MAX_VELICINA], int i, int j, int n, int m) {
    int najvisi = najvisiS(mat, i, j, n, m);
    return mat[i][j] > najvisi ? mat[i][j] - najvisi : -1;
}

void swap(int* a, int* b) {
    int temp = *a;
    *a = *b;
    *b = temp;

    return;
}

void sortPoVisini(int* nizVrh, int* nizVisina, int n) {
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            if (nizVisina[i] < nizVisina[j] || (nizVisina[i] == nizVisina[j] && nizVrh[i] < nizVrh[j])) {
                swap(&nizVisina[i], &nizVisina[j]);
                swap(&nizVrh[i], &nizVrh[j]);
            }
        }
    }

    return;
}

void f(int mat[][MAX_VELICINA], int n, int m, int* nizVrh, int& nNiz) {
    int nizVisina[MAX_VELICINA];
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            int vrh = ako_je_dno_vraca_visinu(mat, i, j, n, m);
            if (vrh > -1) {
                nizVrh[nNiz] = mat[i][j];
                nizVisina[nNiz] = vrh;
                nNiz++;
            }
        }
    }

    sortPoVisini(nizVrh, nizVisina, nNiz);

    return;
}


int main() {
    int mat[][MAX_VELICINA] = {
        {5, 2, 3},
        {4, 15, 6},
        {7, 8, 9}
    };
    int n = 3;
    int m = 3;

    int niz[MAX_VELICINA];
    int nNiz = 0;

    f(mat, n, n, niz, nNiz);

    for (int i = 0; i < nNiz; i++) {
        printf("%d ", niz[i]);
    }

    return 0;
}
---------------------------
